/* Google fonts: go to fonts.google.com */
@import url('https://fonts.googleapis.com/css2?family=Lora:wght@400;700&display=swap');

/* colors from: https://coolors.co/172121-444554-7f7b82-bfacb5-e5d0cc */
/* CSS "variables" (custom properties): https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties */
:root {
    /* rgb() defines a color in terms of red, green and blue intensities, from 0 to 255.
       It's essentially the same as #rrggbb, but in a decimal format rather than hexadecimal. */
    --bg-color-body: rgb(23, 33, 33);
    --bg-color-main: rgb(68, 69, 84);
    --bg-color-article: rgba(0, 0, 0, 0.2); /* in rgba, the "a" is opaqueness. 1 is a solid, opaque color; 0 is transparent. */
    --bg-color-cell: rgb(229, 208, 204, 0.1);
    --highlight-color-1: rgb(127, 123, 130);
    --highlight-color-2: rgb(191, 172, 181);
    --highlight-color-3: rgb(229, 208, 204);
    --fg-color: rgb(240, 240, 240);
}

/* makes calculations of width + padding easier */
/* https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing */
* {
    box-sizing: border-box; 
}

html {
    font-family: 'Lora', serif;
    font-size: 10px;
    background: var(--bg-color-body);
    /* this is the text color */
    color: var(--fg-color);
}

body {
    /* 1.4 * 10px = 14px */
    /* It is recommended to use rem for font sizes, to play well with browser zoom */
    font-size: 1.6rem;
}

main {
    width: 100%;
    max-width: 120rem;

    margin: 0 auto;
    background: var(--bg-color-main);
}

/* this applies to h1 and h2 */
h1, h2 {
    font-size: 3.5rem;
    color: var(--highlight-color-3);
    padding: 3rem 0;
    font-weight: 700;

    text-shadow: 1px 1px 2px var(--bg-color-body);

    /* this centers the text (flow content, eg. display: inline) horizontally */
    text-align: center;
}

/* this only applies to h2, and overwrites some of the rules above */
h2 {
    font-size: 1.8rem;
    padding: 1rem 0;
}

h3 {
    font-weight: 700;
    font-size: 1.6rem;
    padding: 1rem 0;
}

p {
    margin: 1rem 0;
}

strong {
    font-weight: 700;
}

code, pre {
    font-family: monospace;
    text-shadow: 1px 1px 2px var(--bg-color-body);
}

figure {
    border: 1px solid var(--bg-color-body);
    display: block;
    margin: 0.5rem auto;
    padding: 0.5rem;
    text-align: center;
}

figcaption {
    font-size: 1.3rem;
    margin: 0 auto 1rem;
    font-style: italic;
}

img {
    margin: 0.5rem auto;
    max-width: 100%; /* This avoids the image to become larger than its container. */
}

article {
    padding: 2rem;
    margin: 0 0 4rem;
    border: 1px solid var(--bg-color-body);
    border-width: 1px 0; /* border on top and bottom, but not on the sides */
    background: var(--bg-color-article);
    min-height: 100vh; /* 100% of the height of your screen. */
}

.parent, .parent div {
    border: 0.5rem solid var(--highlight-color-3);
    padding: 2rem;
    border-radius: 1rem;
}

.parent {
    border-color: var(--highlight-color-1);
}

.parent > * {
    border-color: var(--highlight-color-2);
    background-color: var(--bg-color-cell);
}

/* "a <p> that follows a .parent". The styles get applied to the p. */ 
.parent + p, figure + p {
    margin-top: 3rem;
}

.note {
    text-align: center;
    font-size: 1.2rem;
    font-style: italic;
}

/* CSS Grid demos */
.grid {
    display: grid;
}

/* Creating columns on breakpoints */
.layout-1 {
    gap: 1rem;
    /* nothing else; this way we get one column by default */
}

@media (min-width: 600px) {
    .layout-1 {
        grid-template-columns: 1fr 1fr;
    }
}

@media (min-width: 800px) {
    .layout-1 {
        grid-template-columns: repeat(4, 1fr);
    }
}

@media (min-width: 1200px) {
    .layout-1 {
        grid-template-columns: repeat(12, 1fr);
    }
}

/* Stable columns; changing cell starts and ends on breakpoints */
.layout-2 {
    grid-template-columns: repeat(12, 1fr);
    gap: 1rem;

    /* Make the heights flexible. */
    /* max-content means: the maximum size of the content. */
    /* Note: we can only do this if we know how many rows we need. */
    grid-template-rows: repeat(5, max-content);
}

/* initially, all elements use the 12 columns.
   This is the same as having a single column. */
.layout-2 > * {
    grid-column: 1 / span 12;
}

/* two-column layout here */
@media (min-width: 600px) {
    /* header uses all the width already */
    .layout-2 header {
        grid-column: 1 / span 12;
        grid-row: 1 / span 1;
    }

    .layout-2 .left-sidebar {
        grid-column: 1 / span 4;
        grid-row: 2 / span 2;
    }

    .layout-2 main {
        grid-column: 5 / span 8;
        grid-row: 2 / span 1;
    }

    .layout-2 .right-sidebar {
        grid-column: 5 / span 8;
        grid-row: 3 / span 1;
    }

    .layout-2 footer {
        grid-column: 1 / span 12;
        grid-row: 4 / span 1;
    }
}

/* three-column layout here */
@media (min-width: 1200px) {
    .layout-2 .left-sidebar {
        grid-column: 1 / span 2;
    }

    .layout-2 main {
        grid-column: 3 / span 8;
        grid-row: 2 / span 2;
    }

    .layout-2 .right-sidebar {
        grid-column: 11 / span 2;
        grid-row: 2 / span 2;
    }
}

/* Stable columns; changing cell starts and ends on breakpoints */
.layout-3 {
    grid-template-columns: repeat(12, 1fr);
    gap: 1rem;
}

/* initially, all elements use the 12 columns.
   This is the same as having a single column. */
.layout-3 > * {
    grid-column: 1 / span 12;
}

/* two-column layout here */
@media (min-width: 600px) {
    .layout-3 {
        grid-template-rows: max-content auto auto max-content;
    }

    /* header uses all the width already */
    .layout-3 header {
        grid-column: 1 / span 12;
        grid-row: 1 / span 1;
    }

    .layout-3 .left-sidebar {
        grid-column: 1 / span 4;
        grid-row: 2 / span 2;
    }

    .layout-3 main {
        grid-column: 5 / span 8;
        grid-row: 2 / span 1;
    }

    .layout-3 .right-sidebar {
        grid-column: 5 / span 8;
        grid-row: 3 / span 1;
    }

    .layout-3 footer {
        grid-column: 1 / span 12;
        grid-row: 4 / span 1;
    }
}

/* three-column layout here */
@media (min-width: 1200px) {
    .layout-3 .left-sidebar {
        grid-column: 1 / span 2;
    }

    .layout-3 main {
        grid-column: 3 / span 8;
        grid-row: 2 / span 2;
    }

    .layout-3 .right-sidebar {
        grid-column: 11 / span 2;
        grid-row: 2 / span 2;
    }
}